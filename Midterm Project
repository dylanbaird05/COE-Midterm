#include <iostream>
#include <vector>
#include <algorithm> 
#include <random>    
#include <ctime>     

using std::cout;
using std::endl;
using std::string;
using std::vector;

class Card {
private:
    string suit;
    string label;
    int value;
    int alternateValue;
    int sortValue;

public:
    Card(string suit, string label, int value, int alternateValue, int sortValue) :
        suit(suit), label(label), value(value), alternateValue(alternateValue), sortValue(sortValue) {}

    void displayCard() {
        cout << "Suit: " << suit << endl;
        cout << "Label: " << label << endl;
        cout << "Value: " << value << endl;
        cout << "Alternate Value: " << alternateValue << endl;
        cout << "Sort Value: " << sortValue << endl;
    }
};

class Deck {
private:
    vector<Card> cards;

public:
    void addCard(Card new_card) {
        cards.push_back(new_card);
    }

    Card dealCard() {
        Card dealt_card = cards.back();
        cards.pop_back();
        return dealt_card;
    }

    Deck splitDeck() {
        Deck split;
        int half_size = cards.size() / 2;
        for (int i = 0; i < half_size; ++i) {
            split.addCard(cards.back());
            cards.pop_back();
        }
        return split;
    }

    void shuffleDeck(int number) {
        std::default_random_engine rng(std::time(nullptr));
        for (int i = 0; i < number; i++) {
            std::shuffle(cards.begin(), cards.end(), rng);
        }
    }

    int cardCount() {
        return cards.size();
    }

    void displayDeck() {
        for (const auto& card : cards) {
            card.displayCard();
            cout << "------------------" << endl;
        }
    }
 
};



int main() {
    Deck myDeck;

    vector<string> suits = {"Hearts", "Diamonds", "Clubs", "Spades"};
    vector<string> labels = {"Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"};

    for (const auto& suit : suits) {
        for (const auto& label : labels) {
            int value = 0; 
            int alternateValue = 0; 
            int sortValue = 0; 
            myDeck.addCard(Card(suit, label, value, alternateValue, sortValue));
        }
    }

    cout << "Original Deck:" << endl;
    myDeck.displayDeck();

    Deck subdeck1 = myDeck.splitDeck();
    Deck subdeck2 = myDeck;

    cout << "Subdeck 1:" << endl;
    subdeck1.displayDeck();

    cout << "Subdeck 2:" << endl;
    subdeck2.displayDeck();

    return 0;
}

