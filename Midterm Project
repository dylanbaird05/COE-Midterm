#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

class Card {
private:
    std::string suit;
    std::string label;
    int value;
    int alternateValue;
    int sortValue;

public:
    Card(std::string suit, std::string label, int value, int alternateValue, int sortValue) :
        suit(std::move(suit)), label(std::move(label)), value(value), alternateValue(alternateValue), sortValue(sortValue) {}

    void display() const {
        std::cout << "Suit: " << suit << "\n"
                  << "Label: " << label << "\n"
                  << "Value: " << value << "\n"
                  << "Alternate Value: " << alternateValue << "\n"
                  << "Sort Value: " << sortValue << "\n";
    }
};

class Deck {
private:
    std::vector<Card> cards;

public:
    void addCard(const Card& newCard) {
        cards.push_back(newCard);
    }

    Card dealCard() {
        Card dealtCard = std::move(cards.back());
        cards.pop_back();
        return dealtCard;
    }

    Deck splitDeck() {
        Deck split;
        size_t halfSize = cards.size() / 2;
        for (size_t i = 0; i < halfSize; ++i) {
            split.addCard(std::move(cards.back()));
            cards.pop_back();
        }
        return split;
    }

    void shuffle(int number) {
        std::random_device rd;
        std::mt19937 rng(rd());
        for (int i = 0; i < number; ++i) {
            std::shuffle(cards.begin(), cards.end(), rng);
        }
    }

    size_t cardCount() const {
        return cards.size();
    }

    void display() const {
        for (const auto& card : cards) {
            card.display();
            std::cout << "------------------\n";
        }
    }
};

int main() {
    Deck myDeck;

    std::vector<std::string> suits = {"Hearts", "Diamonds", "Clubs", "Spades"};
    std::vector<std::string> labels = {"Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"};

    for (const auto& suit : suits) {
        for (const auto& label : labels) {
            myDeck.addCard(Card(suit, label, 0, 0, 0));
        }
    }

    std::cout << "Original Deck:\n";
    myDeck.display();

    Deck subdeck1 = myDeck.splitDeck();
    Deck subdeck2 = myDeck;

    std::cout << "Subdeck 1:\n";
    subdeck1.display();

    std::cout << "Subdeck 2:\n";
    subdeck2.display();

    return 0;
}
